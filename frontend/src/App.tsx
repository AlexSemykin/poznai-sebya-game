import { useState, useEffect } from 'react'
import './App.css'

function App() {
    const [isLoading, setIsLoading] = useState(true)
    const [userSituation, setUserSituation] = useState('')

    useEffect(() => {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini App API
        const telegram = window.Telegram?.WebApp

        if (telegram) {
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Telegram, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
            telegram.ready()

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∏–∑ —Ç–µ–º—ã Telegram
            document.documentElement.style.setProperty('--tg-theme-button-color', telegram.themeParams?.button_color || '#50a8eb')
            document.documentElement.style.setProperty('--tg-theme-bg-color', telegram.themeParams?.bg_color || '#ffffff')
            document.documentElement.style.setProperty('--tg-theme-text-color', telegram.themeParams?.text_color || '#000000')
        }

        setIsLoading(false)
    }, [])

    const handleSubmit = () => {
        const telegram = window.Telegram?.WebApp
        if (telegram) {
            telegram.sendData(JSON.stringify({ 
                action: 'situation_submitted',
                situation: userSituation 
            }))
        }
    }

    if (isLoading) {
        return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
    }

    return (
        <div className="tg-app">
            <header className="tg-header">
                <h1 className="app-title">–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏</h1>
            </header>

            <div className="tg-content">
                <div className="intro-banner">
                    <div className="star-icon">üåü</div>
                    <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏!</h2>
                    <div className="star-icon">üåü</div>
                </div>

                <div className="tg-card description-card">
                    <p>–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ, –≥–¥–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ —Ç–æ—á–∫–∏ –æ—Å–æ–∑–Ω–∞–Ω–∏—è.</p>
                    
                    <p>–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–∫—Ä—ã—Ç—É—é –¥—É–∞–ª—å–Ω–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è ‚Äî –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞, –º–µ–∂–¥—É –∫–æ—Ç–æ—Ä—ã–º–∏ –≤–æ–∑–Ω–∏–∫–ª–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ.</p>
                    
                    <p>–®–∞–≥ –∑–∞ —à–∞–≥–æ–º —Ç—ã –ø–æ–ª—É—á–∏—à—å –º—è–≥–∫–∏–π, –Ω–æ —Ç–æ—á–Ω—ã–π –ø–ª–∞–Ω –≤—ã—Ö–æ–¥–∞ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ ‚Äî –Ω–µ –ø–æ–¥–∞–≤–ª—è—è, –∞ –ø—Ä–∏–Ω–∏–º–∞—è –æ–±–∞ –ø–æ–ª—é—Å–∞ –∫–∞–∫ —á–∞—Å—Ç—å —Å–≤–æ–µ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ–π –ø—Ä–∏—Ä–æ–¥—ã.</p>
                </div>

                <div className="tg-card situation-card">
                    <h3>–û–ø–∏—à–∏ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é</h3>
                    <p className="hint-text">–ò –º—ã –≤–º–µ—Å—Ç–µ —É–≤–∏–¥–∏–º, –≥–¥–µ —Å–ø—Ä—è—Ç–∞–Ω –¥–∞—Ä</p>
                    
                    <textarea 
                        className="situation-input"
                        placeholder="–û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç..."
                        value={userSituation}
                        onChange={(e) => setUserSituation(e.target.value)}
                        rows={4}
                    />
                    
                    <button 
                        className="tg-button"
                        onClick={handleSubmit}
                        disabled={!userSituation.trim()}
                    >
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                    </button>
                </div>
            </div>
        </div>
    )
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è Telegram WebApp
declare global {
    interface Window {
        Telegram?: {
            WebApp: {
                ready: () => void;
                sendData: (data: string) => void;
                themeParams?: {
                    button_color?: string;
                    bg_color?: string;
                    text_color?: string;
                };
                initDataUnsafe?: {
                    user?: {
                        first_name?: string;
                    };
                };
            };
        };
    }
}

export default App
